package config

import (
	"bytes"
	"os"
	"path/filepath"
	"text/template"

	"github.com/pterm/pterm"
)

type Config struct {
	DataDir     string
	CanvasUrl   string
	Username    string
	Password    string
	AccessToken string
}

const cfg_template = `# file directory to store canvas data e.g. $HOME/canvas-sync/data
data_dir: {{ .DataDir }}
# canvas website url e.g. https://canvas.nus.edu.sg
canvas_url: {{ .CanvasUrl }}
# your canvas username
canvas_username: {{ .Username }}
# your canvas password
canvas_password: {{ .Password }}
# generated by canvas-sync (DO NOT EDIT)
access_token: {{ .AccessToken }}
`

func GenerateConfigYaml(config *Config) string {
	t, err := template.New("yaml generator").Parse(cfg_template)
	if err != nil {
		pterm.Error.Printfln("Error generating yaml generator: %s", err.Error())
	}
	buf := &bytes.Buffer{}
	err = t.Execute(buf, config)
	if err != nil {
		pterm.Error.Printfln("Error generating yaml from config: %s", err.Error())
	}
	return buf.String()
}

type GenerateAccessTokenInfo struct {
	AccessToken string
	Username    string
	Password    string
}

func SaveConfig(filepath string, config *Config, verbose bool) error {
	d1 := []byte(GenerateConfigYaml(config))
	if err := os.WriteFile(filepath, d1, 0755); err != nil {
		return err
	}
	pterm.Success.Printfln("Successfully saved config file: %s", filepath)
	if verbose {
		pterm.Println()
		if err := PrintConfig(filepath, config); err != nil {
			return err
		}
	}
	return nil
}

func PrintConfig(path string, config *Config) error {
	td := [][]string{
		{pterm.FgCyan.Sprint("data_dir"), pterm.FgGreen.Sprint(config.DataDir)},
		{pterm.FgCyan.Sprint("canvas_url"), pterm.FgGreen.Sprint(config.CanvasUrl)},
	}
	if config.Username != "" {
		td = append(td, []string{pterm.FgCyan.Sprint("canvas_username"), pterm.FgGreen.Sprint(config.Username)})
	}
	if config.Password != "" {
		td = append(td, []string{pterm.FgCyan.Sprint("canvas_password"), pterm.FgGreen.Sprint(config.Password)})
	}
	td = append(td, []string{pterm.FgCyan.Sprint("access_token"), pterm.FgGreen.Sprint(config.AccessToken)})

	tablePrint, err := pterm.DefaultTable.WithHasHeader().WithData(td).Srender()
	if err != nil {
		return err
	}
	box := pterm.DefaultBox.WithTitle(pterm.Sprintf("Config: %s", path)).Sprint(tablePrint)
	pterm.Println(box)
	return nil
}

var DEFAULT_CONFIG_DIR = "canvas-sync"
var DEFAULT_CONFIG_FILE = "config.yaml"

type ConfigPaths struct {
	CfgDirPath  string
	CfgFilePath string
}

func GetConfigPaths() ConfigPaths {
	// Find home directory.
	home, err := os.UserHomeDir()
	if err != nil {
		pterm.Error.Printfln("Error getting user home directory: %s", err.Error())
		os.Exit(1)
	}
	cfgDir := filepath.Join(home, DEFAULT_CONFIG_DIR)
	cfgFilePath := filepath.Join(cfgDir, DEFAULT_CONFIG_FILE)
	return ConfigPaths{
		CfgDirPath:  cfgDir,
		CfgFilePath: cfgFilePath,
	}
}
